Pygame - это игровая библиотека, набор инструментов, помогяющих программистам создавать
игры. К ним относятся:
1. Графика и анимация
2. Звук
3. Управление

ИГРОВОЙ ЦИКЛ
В сердце каждой игры дежит цикл, который принято называть "игровым циклом".
Тело этого цикла - то что происходит каждый кадр.

В целом все события происходящие на экране разбить можно на 3 большие группы:
1. Обработка ввода (события) -
        любое событие на которые игра должны реагировать. Это могут быть нажатия
        клавиш на клавиатуре, клики мышью и т.п.

2. Обнавление игры -
        Изменение всего, что должно измениться в течении одного кадра.
        Например - если персонаж в воздухе, гравитация должна притянуть его вниз. Обработка
        взаимодействий объектов и т.д.
3. Рендеринг (прорисовка) -
        На этом шаге все выводится на экран: Фоны, персонажи, меню. Все, что игрок должен видеть
        появляется на экране в нужном месте.

4. ВРЕМЯ -
        так же не маловажным является время выполнения цикла, т.е. по факту количесвто FPS это
        то сколько раз в секунду должен исполнятся цикл. Необходимо чтобы это число было не меньше
        на разных компьютерах. Чтобы игра была оптимизированна


РЕНДЕРИНГ(ОТРИСОВКА)

По сути монитор это скопление пикселей, а они в свою очередь "состоят" из основных трех цветов:
Красный, Зеленый и Синий. Каждый из трех цветов может принимать значение от 0 до 255, которое будет условно
обозначать "количество краски в смеси" где 0 это полное отсутствие и 255 краска на 100% того цвета

Изменить пиксель - значит передать команду видеокарте, чтобы она передала соответствующую команду экрану.
Это очень медленный процесс для компьютера. Особенно если надо нарисовать много всего. Исправляется это методом под
названием двойная буферизация.

Двойная буферизация - это когда кадр отрисовывается за пределами игрового цикла и игровой цикл выводит сразу готовый кадр

ОБРАБОТКА СОБЫТИЙ

Так как пока мы создаем "шаблон" программы на pygame, то у нас нет никаких событий. НО.
Если запустить программу сейчас, то станет понятно что мы не можем закрыть программу нажав на крестик
и именно это и надо обработать как событие.

В раздел ОБНОВЛЕНИЕ нечего пока поместить, но нужно убедится что настройка FPS контролирует
скорость игры. Это можно сделать с помощью команды clock.tick() команда tick() просит pygame
определить сколько занимает цикл, а затем сделать паузу, чтобы цикл (целый кадр) длился нужное время.
Т.е. например в нашем случае FPS = 30. А значит длинна одного кадра 1/30 сек, то есть 0.03 сек.
Если цикл кода (обновление, рендеринг и прочее) занимает 0.01 сек тогда pygame сделает паузу на 0.02 секунды